name: Update Debian Repository

on:
  release:
    types: [published]
  push:
    branches: [ deb ]
  workflow_dispatch:

jobs:
  update-repo:
    runs-on: ubuntu-latest
    environment: build
    if: |
      github.event_name == 'release' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && github.ref == 'refs/heads/deb' && !contains(github.event.head_commit.message, '[skip build]'))
    
    steps:
    - name: Get latest release info
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get latest release information and save to file
        gh api repos/${{ github.repository }}/releases/latest > release_info.json
        
        echo "Release info retrieved for: $(jq -r '.tag_name' release_info.json)"

    - name: Post repository update request
      run: |
        # Prepare JSON payload using jq to properly embed the release info
        jq -n \
          --argjson releaseInfo "$(cat release_info.json)" \
          --arg gpgKeyId "${{ secrets.GPG_KEY_ID }}" \
          --arg gpgPrivateKey "${{ secrets.GPG_PRIVATE_KEY }}" \
          '{
            releaseInfo: $releaseInfo,
            gpgKeyId: $gpgKeyId,
            gpgPrivateKey: $gpgPrivateKey
          }' > payload.json
        
        # Post to update URL
        curl -X POST \
          -H "Content-Type: application/json" \
          -d @payload.json \
          "${{ secrets.REPO_UPDATE_URL }}"
        
        # Clean up sensitive files
        rm payload.json release_info.json
        
        echo "Repository update request sent successfully"
